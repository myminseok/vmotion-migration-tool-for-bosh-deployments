// Code generated by counterfeiter. DO NOT EDIT.
package migratefakes

import (
	"context"
	"sync"

	"github.com/vmware-tanzu/vmotion-migration-tool-for-bosh-deployments/pkg/migrate"
	"github.com/vmware-tanzu/vmotion-migration-tool-for-bosh-deployments/pkg/vcenter"
)

type FakeVMRelocator struct {
	RelocateVMStub        func(context.Context, *vcenter.VM, *vcenter.TargetSpec) error
	relocateVMMutex       sync.RWMutex
	relocateVMArgsForCall []struct {
		arg1 context.Context
		arg2 *vcenter.VM
		arg3 *vcenter.TargetSpec
	}
	relocateVMReturns struct {
		result1 error
	}
	relocateVMReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVMRelocator) RelocateVM(arg1 context.Context, arg2 *vcenter.VM, arg3 *vcenter.TargetSpec) error {
	fake.relocateVMMutex.Lock()
	ret, specificReturn := fake.relocateVMReturnsOnCall[len(fake.relocateVMArgsForCall)]
	fake.relocateVMArgsForCall = append(fake.relocateVMArgsForCall, struct {
		arg1 context.Context
		arg2 *vcenter.VM
		arg3 *vcenter.TargetSpec
	}{arg1, arg2, arg3})
	stub := fake.RelocateVMStub
	fakeReturns := fake.relocateVMReturns
	fake.recordInvocation("RelocateVM", []interface{}{arg1, arg2, arg3})
	fake.relocateVMMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVMRelocator) RelocateVMCallCount() int {
	fake.relocateVMMutex.RLock()
	defer fake.relocateVMMutex.RUnlock()
	return len(fake.relocateVMArgsForCall)
}

func (fake *FakeVMRelocator) RelocateVMCalls(stub func(context.Context, *vcenter.VM, *vcenter.TargetSpec) error) {
	fake.relocateVMMutex.Lock()
	defer fake.relocateVMMutex.Unlock()
	fake.RelocateVMStub = stub
}

func (fake *FakeVMRelocator) RelocateVMArgsForCall(i int) (context.Context, *vcenter.VM, *vcenter.TargetSpec) {
	fake.relocateVMMutex.RLock()
	defer fake.relocateVMMutex.RUnlock()
	argsForCall := fake.relocateVMArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVMRelocator) RelocateVMReturns(result1 error) {
	fake.relocateVMMutex.Lock()
	defer fake.relocateVMMutex.Unlock()
	fake.RelocateVMStub = nil
	fake.relocateVMReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVMRelocator) RelocateVMReturnsOnCall(i int, result1 error) {
	fake.relocateVMMutex.Lock()
	defer fake.relocateVMMutex.Unlock()
	fake.RelocateVMStub = nil
	if fake.relocateVMReturnsOnCall == nil {
		fake.relocateVMReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.relocateVMReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVMRelocator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.relocateVMMutex.RLock()
	defer fake.relocateVMMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVMRelocator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migrate.VMRelocator = new(FakeVMRelocator)
